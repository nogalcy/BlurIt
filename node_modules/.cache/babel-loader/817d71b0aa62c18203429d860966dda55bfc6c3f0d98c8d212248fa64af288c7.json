{"ast":null,"code":"var _jsxFileName = \"/Users/cylogan/beauty-brain/src/App.js\";\nimport React, { Component } from 'react';\nimport Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport ImageInputForm from './components/ImageInputForm/ImageInputForm';\nimport Rank from './components/Rank/Rank';\nimport ParticlesBg from 'particles-bg';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor() {\n    super();\n    this.onInputChange = event => {\n      console.log(event.target.value);\n    };\n    this.onButtonSubmit = () => {\n      fetch(\"https://api.clarifai.com/v2/models/\" + \"face-detection\" + \"/outputs\", requestOptions).then(response => response.json()).then(result => {\n        const regions = result.outputs[0].data.regions;\n        regions.forEach(region => {\n          // Accessing and rounding the bounding box values\n          const boundingBox = region.region_info.bounding_box;\n          const topRow = boundingBox.top_row.toFixed(3);\n          const leftCol = boundingBox.left_col.toFixed(3);\n          const bottomRow = boundingBox.bottom_row.toFixed(3);\n          const rightCol = boundingBox.right_col.toFixed(3);\n          region.data.concepts.forEach(concept => {\n            // Accessing and rounding the concept value\n            const name = concept.name;\n            const value = concept.value.toFixed(4);\n            console.log(`${name}: ${value} BBox: ${topRow}, ${leftCol}, ${bottomRow}, ${rightCol}`);\n          });\n        });\n      }).catch(error => console.log('error', error));\n    };\n    this.returnRequestOptions = imageurl => {\n      const PAT = '8a333cce14d447eb93e59b6ac06477d1';\n      const USER_ID = 'nogalcy';\n      const APP_ID = 'my-first-application-2l1vx9';\n      const MODEL_ID = 'face-detection';\n      const IMAGE_URL = imageurl;\n      const raw = JSON.stringify({\n        \"user_app_id\": {\n          \"user_id\": USER_ID,\n          \"app_id\": APP_ID\n        },\n        \"inputs\": [{\n          \"data\": {\n            \"image\": {\n              \"url\": IMAGE_URL\n            }\n          }\n        }]\n      });\n      const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Authorization': 'Key ' + PAT\n        },\n        body: raw\n      };\n      return requestOptions;\n    };\n    this.state = {\n      input: ''\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(ParticlesBg, {\n        type: \"cobweb\",\n        bg: true,\n        color: \"#554994\",\n        num: 100\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ImageInputForm, {\n        onInputChange: this.onInputChange,\n        onButtonSubmit: this.onButtonSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","Navigation","Logo","ImageInputForm","Rank","ParticlesBg","jsxDEV","_jsxDEV","App","constructor","onInputChange","event","console","log","target","value","onButtonSubmit","fetch","requestOptions","then","response","json","result","regions","outputs","data","forEach","region","boundingBox","region_info","bounding_box","topRow","top_row","toFixed","leftCol","left_col","bottomRow","bottom_row","rightCol","right_col","concepts","concept","name","catch","error","returnRequestOptions","imageurl","PAT","USER_ID","APP_ID","MODEL_ID","IMAGE_URL","raw","JSON","stringify","method","headers","body","state","input","render","className","children","type","bg","color","num","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/cylogan/beauty-brain/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport ImageInputForm from './components/ImageInputForm/ImageInputForm';\nimport Rank from './components/Rank/Rank';\nimport ParticlesBg from 'particles-bg';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n    }\n  }\n\n  onInputChange = (event) => {\n    console.log(event.target.value);\n  }\n\n  onButtonSubmit = () => {\n    fetch(\"https://api.clarifai.com/v2/models/\" + \"face-detection\" + \"/outputs\", requestOptions)\n    .then(response => response.json())\n    .then(result => {\n\n        const regions = result.outputs[0].data.regions;\n\n        regions.forEach(region => {\n            // Accessing and rounding the bounding box values\n            const boundingBox = region.region_info.bounding_box;\n            const topRow = boundingBox.top_row.toFixed(3);\n            const leftCol = boundingBox.left_col.toFixed(3);\n            const bottomRow = boundingBox.bottom_row.toFixed(3);\n            const rightCol = boundingBox.right_col.toFixed(3);\n\n            region.data.concepts.forEach(concept => {\n                // Accessing and rounding the concept value\n                const name = concept.name;\n                const value = concept.value.toFixed(4);\n\n                console.log(`${name}: ${value} BBox: ${topRow}, ${leftCol}, ${bottomRow}, ${rightCol}`);\n                \n            });\n        });\n\n    })\n    .catch(error => console.log('error', error));\n  }\n\n  returnRequestOptions = (imageurl) => {\n    const PAT = '8a333cce14d447eb93e59b6ac06477d1';\n    const USER_ID = 'nogalcy';\n    const APP_ID = 'my-first-application-2l1vx9';\n    const MODEL_ID = 'face-detection';\n    const IMAGE_URL = imageurl;\n\n    const raw = JSON.stringify({\n      \"user_app_id\": {\n          \"user_id\": USER_ID,\n          \"app_id\": APP_ID\n      },\n      \"inputs\": [\n          {\n              \"data\": {\n                  \"image\": {\n                      \"url\": IMAGE_URL\n                  }\n              }\n          }\n      ]\n    });\n\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n          'Accept': 'application/json',\n          'Authorization': 'Key ' + PAT\n      },\n      body: raw\n    };\n    return requestOptions\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ParticlesBg type=\"cobweb\" bg={true} color=\"#554994\" num={100}/>\n        <Navigation />\n        <Logo />\n        <Rank />\n        <ImageInputForm onInputChange={this.onInputChange} onButtonSubmit={this.onButtonSubmit}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}